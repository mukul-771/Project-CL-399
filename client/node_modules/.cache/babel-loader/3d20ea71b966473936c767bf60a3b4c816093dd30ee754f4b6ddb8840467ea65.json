{"ast":null,"code":"var _jsxFileName = \"/Users/mukul7711/Documents/webdev/course/react/my-app/src/Components/BarLabel.js\";\nimport * as React from 'react';\nimport { BarChart } from '@mui/x-charts/BarChart';\nimport { Typography } from '@mui/material';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function BarLabel() {\n  const data = [{\n    x: 'W',\n    y: 5.14E-01\n  }, {\n    x: 'A',\n    y: 6.97E-01\n  }, {\n    x: 'L',\n    y: 7.86E-01\n  }, {\n    x: 'R',\n    y: 2.60E-01\n  }, {\n    x: 'R',\n    y: 5.60E-01\n  }, {\n    x: 'S',\n    y: 2.62E-01\n  }, {\n    x: 'I',\n    y: 5.74E-01\n  }, {\n    x: 'R',\n    y: 2.59E-01\n  }, {\n    x: 'R',\n    y: 7.00E-01\n  }, {\n    x: 'Q',\n    y: 2.60E-01\n  }, {\n    x: 'S',\n    y: 5.27E-01\n  }, {\n    x: 'Y',\n    y: 8.28E-01\n  }];\n  const colors = ['#1976d2', '#dc004e', '#ffa726', '#009688', '#f44336', '#9c27b0', '#4caf50', '#3f51b5', '#e91e63', '#673ab7', '#ff5722', '#795548'];\n\n  // Calculate maximum value to scale bar heights\n  const maxValue = Math.max(...data.map(item => item.y));\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      position: 'relative',\n      width: 500,\n      height: 300\n    },\n    children: /*#__PURE__*/_jsxDEV(BarChart, {\n      xAxis: [{\n        scaleType: 'band',\n        data: data.map(item => item.x)\n      }],\n      series: [{\n        data: data.map((item, index) => ({\n          x: item.x,\n          y: item.y,\n          color: colors[index % colors.length] // Use different colors for each bar\n        }))\n      }],\n      width: 500,\n      height: 300\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 30,\n    columnNumber: 5\n  }, this);\n}\n_c = BarLabel;\nvar _c;\n$RefreshReg$(_c, \"BarLabel\");","map":{"version":3,"names":["React","BarChart","Typography","jsxDEV","_jsxDEV","BarLabel","data","x","y","colors","maxValue","Math","max","map","item","style","position","width","height","children","xAxis","scaleType","series","index","color","length","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/mukul7711/Documents/webdev/course/react/my-app/src/Components/BarLabel.js"],"sourcesContent":["import * as React from 'react';\nimport { BarChart } from '@mui/x-charts/BarChart';\nimport { Typography } from '@mui/material';\n\nexport default function BarLabel() {\n  const data = [\n    { x: 'W', y: 5.14E-01 },\n    { x: 'A', y: 6.97E-01 },\n    { x: 'L', y: 7.86E-01 },\n    { x: 'R', y: 2.60E-01 },\n    { x: 'R', y: 5.60E-01 },\n    { x: 'S', y: 2.62E-01 },\n    { x: 'I', y: 5.74E-01 },\n    { x: 'R', y: 2.59E-01 },\n    { x: 'R', y: 7.00E-01 },\n    { x: 'Q', y: 2.60E-01 },\n    { x: 'S', y: 5.27E-01 },\n    { x: 'Y', y: 8.28E-01 },\n  ];\n\n  const colors = [\n    '#1976d2', '#dc004e', '#ffa726', '#009688', '#f44336', '#9c27b0',\n    '#4caf50', '#3f51b5', '#e91e63', '#673ab7', '#ff5722', '#795548'\n  ];\n\n  // Calculate maximum value to scale bar heights\n  const maxValue = Math.max(...data.map(item => item.y));\n\n  return (\n    <div style={{ position: 'relative', width: 500, height: 300 }}>\n      <BarChart\n        xAxis={[{ scaleType: 'band', data: data.map(item => item.x) }]}\n        series={[\n          {\n            data: data.map((item, index) => ({\n              x: item.x,\n              y: item.y,\n              color: colors[index % colors.length], // Use different colors for each bar\n            })),\n          },\n        ]}\n        width={500}\n        height={300}\n      />\n      {/* {data.map((item, index) => (\n        <Typography\n          key={index}\n          style={{\n            position: 'absolute',\n            left: `${(index + 0.5) * (500 / data.length) - 10}px`,\n            top: `${300 - (item.y / maxValue) * 300 - 20}px`, // Adjust this to place the label on top of the bar\n            color: colors[index % colors.length],\n            fontWeight: 'bold',\n          }}\n        >\n          {item.y.toFixed(2)}\n        </Typography>\n      ))} */}\n    </div>\n  );\n}\n"],"mappings":";AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAC9B,SAASC,QAAQ,QAAQ,wBAAwB;AACjD,SAASC,UAAU,QAAQ,eAAe;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE3C,eAAe,SAASC,QAAQA,CAAA,EAAG;EACjC,MAAMC,IAAI,GAAG,CACX;IAAEC,CAAC,EAAE,GAAG;IAAEC,CAAC,EAAE;EAAS,CAAC,EACvB;IAAED,CAAC,EAAE,GAAG;IAAEC,CAAC,EAAE;EAAS,CAAC,EACvB;IAAED,CAAC,EAAE,GAAG;IAAEC,CAAC,EAAE;EAAS,CAAC,EACvB;IAAED,CAAC,EAAE,GAAG;IAAEC,CAAC,EAAE;EAAS,CAAC,EACvB;IAAED,CAAC,EAAE,GAAG;IAAEC,CAAC,EAAE;EAAS,CAAC,EACvB;IAAED,CAAC,EAAE,GAAG;IAAEC,CAAC,EAAE;EAAS,CAAC,EACvB;IAAED,CAAC,EAAE,GAAG;IAAEC,CAAC,EAAE;EAAS,CAAC,EACvB;IAAED,CAAC,EAAE,GAAG;IAAEC,CAAC,EAAE;EAAS,CAAC,EACvB;IAAED,CAAC,EAAE,GAAG;IAAEC,CAAC,EAAE;EAAS,CAAC,EACvB;IAAED,CAAC,EAAE,GAAG;IAAEC,CAAC,EAAE;EAAS,CAAC,EACvB;IAAED,CAAC,EAAE,GAAG;IAAEC,CAAC,EAAE;EAAS,CAAC,EACvB;IAAED,CAAC,EAAE,GAAG;IAAEC,CAAC,EAAE;EAAS,CAAC,CACxB;EAED,MAAMC,MAAM,GAAG,CACb,SAAS,EAAE,SAAS,EAAE,SAAS,EAAE,SAAS,EAAE,SAAS,EAAE,SAAS,EAChE,SAAS,EAAE,SAAS,EAAE,SAAS,EAAE,SAAS,EAAE,SAAS,EAAE,SAAS,CACjE;;EAED;EACA,MAAMC,QAAQ,GAAGC,IAAI,CAACC,GAAG,CAAC,GAAGN,IAAI,CAACO,GAAG,CAACC,IAAI,IAAIA,IAAI,CAACN,CAAC,CAAC,CAAC;EAEtD,oBACEJ,OAAA;IAAKW,KAAK,EAAE;MAAEC,QAAQ,EAAE,UAAU;MAAEC,KAAK,EAAE,GAAG;MAAEC,MAAM,EAAE;IAAI,CAAE;IAAAC,QAAA,eAC5Df,OAAA,CAACH,QAAQ;MACPmB,KAAK,EAAE,CAAC;QAAEC,SAAS,EAAE,MAAM;QAAEf,IAAI,EAAEA,IAAI,CAACO,GAAG,CAACC,IAAI,IAAIA,IAAI,CAACP,CAAC;MAAE,CAAC,CAAE;MAC/De,MAAM,EAAE,CACN;QACEhB,IAAI,EAAEA,IAAI,CAACO,GAAG,CAAC,CAACC,IAAI,EAAES,KAAK,MAAM;UAC/BhB,CAAC,EAAEO,IAAI,CAACP,CAAC;UACTC,CAAC,EAAEM,IAAI,CAACN,CAAC;UACTgB,KAAK,EAAEf,MAAM,CAACc,KAAK,GAAGd,MAAM,CAACgB,MAAM,CAAC,CAAE;QACxC,CAAC,CAAC;MACJ,CAAC,CACD;MACFR,KAAK,EAAE,GAAI;MACXC,MAAM,EAAE;IAAI;MAAAQ,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACb;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAeC,CAAC;AAEV;AAACC,EAAA,GAxDuBzB,QAAQ;AAAA,IAAAyB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}