{"ast":null,"code":"var _jsxFileName = \"/Users/mukul7711/Documents/webdev/course/react/my-app/src/Components/BarLabel.js\";\nimport * as React from 'react';\nimport { BarChart } from '@mui/x-charts/BarChart';\nimport { Typography } from '@mui/material';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function BarLabel() {\n  const seriesData = [{\n    data: [0.514, 0.697, 0.786, 0.260, 0.560, 0.262, 0.574, 0.259, 0.700, 0.260, 0.527, 0.828],\n    color: '#1976d2'\n  }];\n  const labels = ['W', 'A', 'L', 'R', 'R', 'S', 'I', 'R', 'R', 'Q', 'S', 'Y'];\n\n  // Calculate maximum value across all series to scale bar heights\n  const maxValue = Math.max(...seriesData.flatMap(series => series.data));\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      position: 'relative',\n      width: 500,\n      height: 300\n    },\n    children: [/*#__PURE__*/_jsxDEV(BarChart, {\n      xAxis: [{\n        scaleType: 'band',\n        data: labels\n      }],\n      series: seriesData.map(series => ({\n        data: series.data,\n        color: series.color\n      })),\n      width: 500,\n      height: 300\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 7\n    }, this), seriesData.map((series, seriesIndex) => series.data.map((value, dataIndex) => /*#__PURE__*/_jsxDEV(Typography, {\n      style: {\n        position: 'absolute',\n        left: `${(dataIndex + 0.5) * (500 / labels.length) - 10 + seriesIndex * 20}px`,\n        top: `${300 - value / maxValue * 300 - 20}px`,\n        // Adjust this to place the label on top of the bar\n        color: series.color,\n        fontWeight: 'bold'\n      },\n      children: value\n    }, `${seriesIndex}-${dataIndex}`, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 11\n    }, this)))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 19,\n    columnNumber: 5\n  }, this);\n}\n_c = BarLabel;\nvar _c;\n$RefreshReg$(_c, \"BarLabel\");","map":{"version":3,"names":["React","BarChart","Typography","jsxDEV","_jsxDEV","BarLabel","seriesData","data","color","labels","maxValue","Math","max","flatMap","series","style","position","width","height","children","xAxis","scaleType","map","fileName","_jsxFileName","lineNumber","columnNumber","seriesIndex","value","dataIndex","left","length","top","fontWeight","_c","$RefreshReg$"],"sources":["/Users/mukul7711/Documents/webdev/course/react/my-app/src/Components/BarLabel.js"],"sourcesContent":["import * as React from 'react';\nimport { BarChart } from '@mui/x-charts/BarChart';\nimport { Typography } from '@mui/material';\n\nexport default function BarLabel() {\n    const seriesData = [\n        { data: [0.514, 0.697, 0.786, 0.260, 0.560, 0.262, 0.574, 0.259, 0.700, 0.260, 0.527, 0.828], color: '#1976d2' }\n      ];\n      \n      const labels = [\n        'W', 'A', 'L', 'R', 'R', 'S', 'I', 'R', 'R', 'Q', 'S', 'Y'\n      ];\n      \n\n  // Calculate maximum value across all series to scale bar heights\n  const maxValue = Math.max(...seriesData.flatMap(series => series.data));\n\n  return (\n    <div style={{ position: 'relative', width: 500, height: 300 }}>\n      <BarChart\n        xAxis={[{ scaleType: 'band', data: labels }]}\n        series={seriesData.map((series) => ({\n          data: series.data,\n          color: series.color,\n        }))}\n        width={500}\n        height={300}\n      />\n      {seriesData.map((series, seriesIndex) =>\n        series.data.map((value, dataIndex) => (\n          <Typography\n            key={`${seriesIndex}-${dataIndex}`}\n            style={{\n              position: 'absolute',\n              left: `${(dataIndex + 0.5) * (500 / labels.length) - 10 + seriesIndex * 20}px`,\n              top: `${300 - (value / maxValue) * 300 - 20}px`, // Adjust this to place the label on top of the bar\n              color: series.color,\n              fontWeight: 'bold',\n            }}\n          >\n            {value}\n          </Typography>\n        ))\n      )}\n    </div>\n  );\n}\n"],"mappings":";AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAC9B,SAASC,QAAQ,QAAQ,wBAAwB;AACjD,SAASC,UAAU,QAAQ,eAAe;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE3C,eAAe,SAASC,QAAQA,CAAA,EAAG;EAC/B,MAAMC,UAAU,GAAG,CACf;IAAEC,IAAI,EAAE,CAAC,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,CAAC;IAAEC,KAAK,EAAE;EAAU,CAAC,CACjH;EAED,MAAMC,MAAM,GAAG,CACb,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,CAC3D;;EAGL;EACA,MAAMC,QAAQ,GAAGC,IAAI,CAACC,GAAG,CAAC,GAAGN,UAAU,CAACO,OAAO,CAACC,MAAM,IAAIA,MAAM,CAACP,IAAI,CAAC,CAAC;EAEvE,oBACEH,OAAA;IAAKW,KAAK,EAAE;MAAEC,QAAQ,EAAE,UAAU;MAAEC,KAAK,EAAE,GAAG;MAAEC,MAAM,EAAE;IAAI,CAAE;IAAAC,QAAA,gBAC5Df,OAAA,CAACH,QAAQ;MACPmB,KAAK,EAAE,CAAC;QAAEC,SAAS,EAAE,MAAM;QAAEd,IAAI,EAAEE;MAAO,CAAC,CAAE;MAC7CK,MAAM,EAAER,UAAU,CAACgB,GAAG,CAAER,MAAM,KAAM;QAClCP,IAAI,EAAEO,MAAM,CAACP,IAAI;QACjBC,KAAK,EAAEM,MAAM,CAACN;MAChB,CAAC,CAAC,CAAE;MACJS,KAAK,EAAE,GAAI;MACXC,MAAM,EAAE;IAAI;MAAAK,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACb,CAAC,EACDpB,UAAU,CAACgB,GAAG,CAAC,CAACR,MAAM,EAAEa,WAAW,KAClCb,MAAM,CAACP,IAAI,CAACe,GAAG,CAAC,CAACM,KAAK,EAAEC,SAAS,kBAC/BzB,OAAA,CAACF,UAAU;MAETa,KAAK,EAAE;QACLC,QAAQ,EAAE,UAAU;QACpBc,IAAI,EAAE,GAAG,CAACD,SAAS,GAAG,GAAG,KAAK,GAAG,GAAGpB,MAAM,CAACsB,MAAM,CAAC,GAAG,EAAE,GAAGJ,WAAW,GAAG,EAAE,IAAI;QAC9EK,GAAG,EAAE,GAAG,GAAG,GAAIJ,KAAK,GAAGlB,QAAQ,GAAI,GAAG,GAAG,EAAE,IAAI;QAAE;QACjDF,KAAK,EAAEM,MAAM,CAACN,KAAK;QACnByB,UAAU,EAAE;MACd,CAAE;MAAAd,QAAA,EAEDS;IAAK,GATD,GAAGD,WAAW,IAAIE,SAAS,EAAE;MAAAN,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAUxB,CACb,CACH,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV;AAACQ,EAAA,GA1CuB7B,QAAQ;AAAA,IAAA6B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}